type Pick {
  id: ID!
  user: User!
  league: FantasyLeague!
  team: SportsTeam!
  week: Int
  isInvalidated: Boolean!
}

input SubmitPickRequest {
  userID: ID!
  leagueID: ID!
  teamIDs: [ID!]
  week: Int!
}

type SubmitPickResponse {
  pick: [Pick!]
  errors: [Error!]
}

type User {
  id: ID!
  email: String!
  displayName(leagueID: ID!): String
  fantasyLeagues: [FantasyLeague!]
}

input CreateUserRequest {
  email: String!
}

type CreateUserResponse {
  user: User
  errors: [Error!]
}

input AddUserToFantasyLeagueRequest {
  userID: ID!
  leagueID: ID!
}

type AddUserToFantasyLeagueResponse {
  league: FantasyLeague
  errors: [Error!]
}

type FantasyLeague {
  id: ID!
  name: String!
  owner: User!
  users: [User!]
  picks: [Pick!]
  gameMode: GameMode!
  currentWeek: Int!
  revealedWeek: Int!
  season: String!
}

input CreateFantasyLeagueRequest {
  name: String!
  ownerID: ID!
  gameMode: GameMode!
}

type CreateFantasyLeagueResponse {
  league: FantasyLeague
  errors: [Error!]
}

type SportsTeam {
  id: ID!
  name: String!
  shortName: String!
  sportsLeague: SportsLeague!
}

type SportsGame {
  id: ID!
  sportsLeague: SportsLeague!
  startsAt: String!
  awayTeam: SportsTeam!
  homeTeam: SportsTeam!
  season: String!
  week: Int!
  result: SportsGameResult
}

type SportsGameResult {
  complete: Boolean!
  awayTeamScore: Int
  homeTeamScore: Int
}

input CreateSportsGameRequest {
  league: SportsLeague
  awayTeamShortName: String!
  homeTeamShortName: String!
  scheduledStart: String
  season: String
  round: Int
}

type CreateSportsGameResponse {
  sportsGame: SportsGame
  errors: [Error!]
}

type Query {
  user(email: String!): User
  league(leagueID: ID!): FantasyLeague
  leagues(userID: String): [FantasyLeague!]
  currentPick(leagueID: ID!, userID: ID!): [Pick!]
  sportsTeams(league: SportsLeague): [SportsTeam!]
  sportsGames(league: SportsLeague, season: String, week: Int): [SportsGame!]
  currentSeason(league: SportsLeague): String
}

type Mutation {
  #createUser(request: CreateUserRequest!): CreateUserResponse
  #createFantasyLeague(request: CreateFantasyLeagueRequest!): CreateFantasyLeagueResponse
  #addUserToFantasyLeague(request: AddUserToFantasyLeagueRequest!): AddUserToFantasyLeagueResponse
  submitPick(request: SubmitPickRequest!): SubmitPickResponse
  #createSportsGame(request: CreateSportsGameRequest!): CreateSportsGameResponse
}

type Error {
  code: String!
  message: String
}

enum SportsLeague {
  NFL
}

enum GameMode {
  PICK_TWO
  STREAKIN
  SURVIVOR
}
